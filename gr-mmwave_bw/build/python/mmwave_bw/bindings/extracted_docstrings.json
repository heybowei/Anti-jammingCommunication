{"gr::mmwave_bw::rx_deqam": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_deqam.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_deqam's constructor is in a private implementation class. mmwave_bw::rx_deqam::make is the public interface for creating new instances.\n\nArgs:\n    qam_order : ", "gr::mmwave_bw::rx_deqam::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_deqam.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_deqam's constructor is in a private implementation class. mmwave_bw::rx_deqam::make is the public interface for creating new instances.\n\nArgs:\n    qam_order : ", "gr::mmwave_bw::rx_fft": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_fft.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_fft's constructor is in a private implementation class. mmwave_bw::rx_fft::make is the public interface for creating new instances.\n\nArgs:\n    fft_size_ : \n    num_ofdm_per_frame : ", "gr::mmwave_bw::rx_fft::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_fft.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_fft's constructor is in a private implementation class. mmwave_bw::rx_fft::make is the public interface for creating new instances.\n\nArgs:\n    fft_size_ : \n    num_ofdm_per_frame : ", "gr::mmwave_bw::rx_frame_detect": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_frame_detect.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_frame_detect's constructor is in a private implementation class. mmwave_bw::rx_frame_detect::make is the public interface for creating new instances.\n\nArgs:\n    num_ant : \n    num_stm : \n    samp_rate : \n    fft_size : \n    num_ofdm_per_frame : \n    vht_en : \n    project_en : \n    search_step_size : \n    noise_ampl_thres : \n    ltf_corr_thres : \n    freq_offset_en : \n    num_sc_pha_noise : ", "gr::mmwave_bw::rx_frame_detect::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_frame_detect.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_frame_detect's constructor is in a private implementation class. mmwave_bw::rx_frame_detect::make is the public interface for creating new instances.\n\nArgs:\n    num_ant : \n    num_stm : \n    samp_rate : \n    fft_size : \n    num_ofdm_per_frame : \n    vht_en : \n    project_en : \n    search_step_size : \n    noise_ampl_thres : \n    ltf_corr_thres : \n    freq_offset_en : \n    num_sc_pha_noise : ", "gr::mmwave_bw::rx_frame_equalization_csi": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_frame_equalization_csi.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_frame_equalization_csi's constructor is in a private implementation class. mmwave_bw::rx_frame_equalization_csi::make is the public interface for creating new instances.\n\nArgs:\n    num_ant : \n    num_stm : \n    samp_rate : \n    fft_size : \n    num_ofdm_per_frame : \n    dec_alg : \n    step_size : \n    vht_en : \n    num_sc_pha_noise : ", "gr::mmwave_bw::rx_frame_equalization_csi::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::rx_frame_equalization_csi.\n\nTo avoid accidental use of raw pointers, mmwave_bw::rx_frame_equalization_csi's constructor is in a private implementation class. mmwave_bw::rx_frame_equalization_csi::make is the public interface for creating new instances.\n\nArgs:\n    num_ant : \n    num_stm : \n    samp_rate : \n    fft_size : \n    num_ofdm_per_frame : \n    dec_alg : \n    step_size : \n    vht_en : \n    num_sc_pha_noise : ", "gr::mmwave_bw::tx_freq_frame": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_freq_frame.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_freq_frame's constructor is in a private implementation class. mmwave_bw::tx_freq_frame::make is the public interface for creating new instances.\n\nArgs:\n    num_ant_ : \n    samp_rate : \n    fft_size_ : \n    num_ofdm_per_frame_ : \n    vht_en : \n    num_sc_pha_noise : ", "gr::mmwave_bw::tx_freq_frame::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_freq_frame.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_freq_frame's constructor is in a private implementation class. mmwave_bw::tx_freq_frame::make is the public interface for creating new instances.\n\nArgs:\n    num_ant_ : \n    samp_rate : \n    fft_size_ : \n    num_ofdm_per_frame_ : \n    vht_en : \n    num_sc_pha_noise : ", "gr::mmwave_bw::tx_ifft": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_ifft.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_ifft's constructor is in a private implementation class. mmwave_bw::tx_ifft::make is the public interface for creating new instances.\n\nArgs:\n    fft_size_ : ", "gr::mmwave_bw::tx_ifft::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_ifft.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_ifft's constructor is in a private implementation class. mmwave_bw::tx_ifft::make is the public interface for creating new instances.\n\nArgs:\n    fft_size_ : ", "gr::mmwave_bw::tx_qam_source_rand": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_qam_source_rand.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_qam_source_rand's constructor is in a private implementation class. mmwave_bw::tx_qam_source_rand::make is the public interface for creating new instances.\n\nArgs:\n    num_of_qam : ", "gr::mmwave_bw::tx_qam_source_rand::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_qam_source_rand.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_qam_source_rand's constructor is in a private implementation class. mmwave_bw::tx_qam_source_rand::make is the public interface for creating new instances.\n\nArgs:\n    num_of_qam : ", "gr::mmwave_bw::tx_time_frame": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_time_frame.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_time_frame's constructor is in a private implementation class. mmwave_bw::tx_time_frame::make is the public interface for creating new instances.\n\nArgs:\n    num_ant_ : \n    samp_rate_ : \n    fft_size_ : \n    num_ofdm_per_frame_ : \n    vht_en_ : \n    num_sc_pha_noise_ : ", "gr::mmwave_bw::tx_time_frame::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of mmwave_bw::tx_time_frame.\n\nTo avoid accidental use of raw pointers, mmwave_bw::tx_time_frame's constructor is in a private implementation class. mmwave_bw::tx_time_frame::make is the public interface for creating new instances.\n\nArgs:\n    num_ant_ : \n    samp_rate_ : \n    fft_size_ : \n    num_ofdm_per_frame_ : \n    vht_en_ : \n    num_sc_pha_noise_ : ", "para": "", "para::vec_2": "", "para::vec_1": "", "para::initialize": "", "para::randnum": "", "para::writefile": "", "gr::mmwave_bw::rx_deqam_impl": "", "gr::mmwave_bw::rx_deqam_impl::vec_1": "", "gr::mmwave_bw::rx_deqam_impl::rx_deqam_impl": "", "gr::mmwave_bw::rx_deqam_impl::~rx_deqam_impl": "", "gr::mmwave_bw::rx_deqam_impl::forecast": "", "gr::mmwave_bw::rx_deqam_impl::general_work": "", "gr::mmwave_bw::rx_fft_impl": "", "gr::mmwave_bw::rx_fft_impl::rx_fft_impl": "", "gr::mmwave_bw::rx_fft_impl::~rx_fft_impl": "", "gr::mmwave_bw::rx_fft_impl::forecast": "", "gr::mmwave_bw::rx_fft_impl::general_work": "", "gr::mmwave_bw::rx_frame_detect_impl": "", "gr::mmwave_bw::rx_frame_detect_impl::vec_1": "", "gr::mmwave_bw::rx_frame_detect_impl::rx_frame_detect_impl": "", "gr::mmwave_bw::rx_frame_detect_impl::~rx_frame_detect_impl": "", "gr::mmwave_bw::rx_frame_detect_impl::forecast": "", "gr::mmwave_bw::rx_frame_detect_impl::general_work": "", "gr::mmwave_bw::rx_frame_detect_impl::find_preamble": "", "gr::mmwave_bw::rx_frame_detect_impl::freq_offset_estimation": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::vec_2": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::vec_1": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::rx_frame_equalization_csi_impl": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::~rx_frame_equalization_csi_impl": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::forecast": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::general_work": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::lft_based_mrc_equalization": "", "gr::mmwave_bw::rx_frame_equalization_csi_impl::phase_detect": "", "gr::mmwave_bw::tx_freq_frame_impl": "", "gr::mmwave_bw::tx_freq_frame_impl::vec_2": "", "gr::mmwave_bw::tx_freq_frame_impl::tx_freq_frame_impl": "", "gr::mmwave_bw::tx_freq_frame_impl::~tx_freq_frame_impl": "", "gr::mmwave_bw::tx_freq_frame_impl::forecast": "", "gr::mmwave_bw::tx_freq_frame_impl::general_work": "", "gr::mmwave_bw::tx_ifft_impl": "", "gr::mmwave_bw::tx_ifft_impl::tx_ifft_impl": "", "gr::mmwave_bw::tx_ifft_impl::~tx_ifft_impl": "", "gr::mmwave_bw::tx_ifft_impl::forecast": "", "gr::mmwave_bw::tx_ifft_impl::general_work": "", "gr::mmwave_bw::tx_qam_source_rand_impl": "", "gr::mmwave_bw::tx_qam_source_rand_impl::vec_1": "", "gr::mmwave_bw::tx_qam_source_rand_impl::tx_qam_source_rand_impl": "", "gr::mmwave_bw::tx_qam_source_rand_impl::~tx_qam_source_rand_impl": "", "gr::mmwave_bw::tx_qam_source_rand_impl::work": "", "gr::mmwave_bw::tx_time_frame_impl": "", "gr::mmwave_bw::tx_time_frame_impl::tx_time_frame_impl": "", "gr::mmwave_bw::tx_time_frame_impl::~tx_time_frame_impl": "", "gr::mmwave_bw::tx_time_frame_impl::forecast": "", "gr::mmwave_bw::tx_time_frame_impl::general_work": ""}